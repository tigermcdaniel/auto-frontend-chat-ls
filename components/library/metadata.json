[
  {
    "id": "lib_1753937268802_kkxfmld2x",
    "name": "TodoList",
    "description": "A todolist component",
    "category": "ui",
    "filename": "TodoList.tsx",
    "code": "import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PlusCircle } from \"lucide-react\";\n\ninterface TodoItem {\n  task: string;\n  completed: boolean;\n}\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState<TodoItem[]>([\n    { task: \"Complete project proposal\", completed: false },\n    { task: \"Review code changes\", completed: true },\n    { task: \"Schedule team meeting\", completed: false },\n    { task: \"Update documentation\", completed: false },\n    { task: \"Prepare presentation slides\", completed: false },\n  ]);\n  const [newTask, setNewTask] = useState(\"\");\n\n  const addTask = () => {\n    if (newTask.trim() === \"\") return;\n    setTodos([...todos, { task: newTask, completed: false }]);\n    setNewTask(\"\");\n  };\n\n  const toggleCompleted = (index: number) => {\n    const updatedTodos = [...todos];\n    updatedTodos[index].completed = !updatedTodos[index].completed;\n    setTodos(updatedTodos);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      addTask();\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto shadow-lg\">\n      <CardHeader className=\"bg-gradient-to-r from-violet-500 to-purple-600 text-white\">\n        <CardTitle className=\"text-xl font-bold text-center\">Todo List</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"flex space-x-2 mb-6\">\n          <Input\n            placeholder=\"Add a new task...\"\n            value={newTask}\n            onChange={(e) => setNewTask(e.target.value)}\n            onKeyDown={handleKeyDown}\n            className=\"flex-1\"\n          />\n          <Button onClick={addTask} size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700\">\n            <PlusCircle className=\"h-4 w-4 mr-1\" /> Add\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {todos.length === 0 ? (\n            <p className=\"text-center text-gray-500 py-4\">No tasks yet. Add one above!</p>\n          ) : (\n            todos.map((todo, index) => (\n              <div \n                key={index} \n                className=\"flex items-center p-3 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors\"\n              >\n                <Checkbox\n                  id={`task-${index}`}\n                  checked={todo.completed}\n                  onCheckedChange={() => toggleCompleted(index)}\n                  className=\"mr-3 data-[state=checked]:bg-purple-600\"\n                />\n                <label\n                  htmlFor={`task-${index}`}\n                  className={`flex-1 cursor-pointer ${\n                    todo.completed ? \"line-through text-gray-400\" : \"text-gray-700\"\n                  }`}\n                >\n                  {todo.task}\n                </label>\n              </div>\n            ))\n          )}\n        </div>\n        \n        <p className=\"text-sm text-gray-500 mt-6 text-center\">\n          Here is your todo list with {todos.length} tasks. You can add more tasks, check them off when completed, and manage your day effectively!\n        </p>\n      </CardContent>\n    </Card>\n  );\n}",
    "createdAt": "2025-07-31T04:47:48.802Z",
    "tags": [
      "state",
      "button",
      "card",
      "input",
      "todolist"
    ]
  },
  {
    "id": "lib_1753938104383_b0jka100x",
    "name": "TodoList_1",
    "description": "A todolist component",
    "category": "ui",
    "filename": "TodoList_1.tsx",
    "code": "import { useState } from 'react'\nimport { format } from 'date-fns'\nimport { Calendar as CalendarIcon, Trash2 } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface Todo {\n  id: string;\n  task: string;\n  completed: boolean;\n  dueDate?: Date;\n}\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [newTask, setNewTask] = useState('');\n  const [dueDate, setDueDate] = useState<Date | undefined>(undefined);\n\n  const addTodo = () => {\n    if (newTask.trim() === '') return;\n    \n    const newTodo: Todo = {\n      id: crypto.randomUUID(),\n      task: newTask,\n      completed: false,\n      dueDate: dueDate,\n    };\n    \n    setTodos([...todos, newTodo]);\n    setNewTask('');\n    setDueDate(undefined);\n  };\n\n  const toggleTodo = (id: string) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-center\">Todo List</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div className=\"flex flex-col space-y-4\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Add a new task...\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n                className=\"flex-1\"\n              />\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\" className=\"px-2\">\n                    <CalendarIcon className=\"h-4 w-4\" />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={dueDate}\n                    onSelect={setDueDate}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <Button onClick={addTodo}>Add</Button>\n            </div>\n            \n            {dueDate && (\n              <div className=\"text-sm text-muted-foreground\">\n                Due date: {format(dueDate, 'PPP')}\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            {todos.length === 0 ? (\n              <div className=\"text-center py-4 text-muted-foreground\">\n                No tasks yet. Add one above!\n              </div>\n            ) : (\n              todos.map((todo) => (\n                <div\n                  key={todo.id}\n                  className={cn(\n                    \"flex items-center justify-between p-3 rounded-lg border\",\n                    todo.completed ? \"bg-muted/50\" : \"bg-card\"\n                  )}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Checkbox\n                      id={`todo-${todo.id}`}\n                      checked={todo.completed}\n                      onCheckedChange={() => toggleTodo(todo.id)}\n                    />\n                    <Label\n                      htmlFor={`todo-${todo.id}`}\n                      className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n                        todo.completed && \"line-through text-muted-foreground\"\n                      )}\n                    >\n                      {todo.task}\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {todo.dueDate && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        {format(todo.dueDate, 'MMM d')}\n                      </span>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => deleteTodo(todo.id)}\n                      className=\"h-8 w-8 text-destructive\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                      <span className=\"sr-only\">Delete</span>\n                    </Button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
    "createdAt": "2025-07-31T05:01:44.383Z",
    "tags": [
      "state",
      "button",
      "card",
      "input",
      "todolist"
    ]
  },
  {
    "id": "lib_1753938106819_z7td50fns",
    "name": "TodoList_2",
    "description": "A todolist component",
    "category": "ui",
    "filename": "TodoList_2.tsx",
    "code": "import { useState } from 'react'\nimport { format } from 'date-fns'\nimport { Calendar as CalendarIcon, Trash2 } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface Todo {\n  id: string;\n  task: string;\n  completed: boolean;\n  dueDate?: Date;\n}\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [newTask, setNewTask] = useState('');\n  const [dueDate, setDueDate] = useState<Date | undefined>(undefined);\n\n  const addTodo = () => {\n    if (newTask.trim() === '') return;\n    \n    const newTodo: Todo = {\n      id: crypto.randomUUID(),\n      task: newTask,\n      completed: false,\n      dueDate: dueDate,\n    };\n    \n    setTodos([...todos, newTodo]);\n    setNewTask('');\n    setDueDate(undefined);\n  };\n\n  const toggleTodo = (id: string) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-center\">Todo List</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div className=\"flex flex-col space-y-4\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Add a new task...\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n                className=\"flex-1\"\n              />\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\" className=\"px-2\">\n                    <CalendarIcon className=\"h-4 w-4\" />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={dueDate}\n                    onSelect={setDueDate}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <Button onClick={addTodo}>Add</Button>\n            </div>\n            \n            {dueDate && (\n              <div className=\"text-sm text-muted-foreground\">\n                Due date: {format(dueDate, 'PPP')}\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            {todos.length === 0 ? (\n              <div className=\"text-center py-4 text-muted-foreground\">\n                No tasks yet. Add one above!\n              </div>\n            ) : (\n              todos.map((todo) => (\n                <div\n                  key={todo.id}\n                  className={cn(\n                    \"flex items-center justify-between p-3 rounded-lg border\",\n                    todo.completed ? \"bg-muted/50\" : \"bg-card\"\n                  )}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Checkbox\n                      id={`todo-${todo.id}`}\n                      checked={todo.completed}\n                      onCheckedChange={() => toggleTodo(todo.id)}\n                    />\n                    <Label\n                      htmlFor={`todo-${todo.id}`}\n                      className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n                        todo.completed && \"line-through text-muted-foreground\"\n                      )}\n                    >\n                      {todo.task}\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {todo.dueDate && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        {format(todo.dueDate, 'MMM d')}\n                      </span>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => deleteTodo(todo.id)}\n                      className=\"h-8 w-8 text-destructive\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                      <span className=\"sr-only\">Delete</span>\n                    </Button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
    "createdAt": "2025-07-31T05:01:46.819Z",
    "tags": [
      "state",
      "button",
      "card",
      "input",
      "todolist"
    ]
  },
  {
    "id": "lib_1753938108285_9waq77iba",
    "name": "TodoList_3",
    "description": "A todolist component",
    "category": "ui",
    "filename": "TodoList_3.tsx",
    "code": "import { useState } from 'react'\nimport { format } from 'date-fns'\nimport { Calendar as CalendarIcon, Trash2 } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface Todo {\n  id: string;\n  task: string;\n  completed: boolean;\n  dueDate?: Date;\n}\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [newTask, setNewTask] = useState('');\n  const [dueDate, setDueDate] = useState<Date | undefined>(undefined);\n\n  const addTodo = () => {\n    if (newTask.trim() === '') return;\n    \n    const newTodo: Todo = {\n      id: crypto.randomUUID(),\n      task: newTask,\n      completed: false,\n      dueDate: dueDate,\n    };\n    \n    setTodos([...todos, newTodo]);\n    setNewTask('');\n    setDueDate(undefined);\n  };\n\n  const toggleTodo = (id: string) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-center\">Todo List</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div className=\"flex flex-col space-y-4\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Add a new task...\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n                className=\"flex-1\"\n              />\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\" className=\"px-2\">\n                    <CalendarIcon className=\"h-4 w-4\" />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={dueDate}\n                    onSelect={setDueDate}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <Button onClick={addTodo}>Add</Button>\n            </div>\n            \n            {dueDate && (\n              <div className=\"text-sm text-muted-foreground\">\n                Due date: {format(dueDate, 'PPP')}\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            {todos.length === 0 ? (\n              <div className=\"text-center py-4 text-muted-foreground\">\n                No tasks yet. Add one above!\n              </div>\n            ) : (\n              todos.map((todo) => (\n                <div\n                  key={todo.id}\n                  className={cn(\n                    \"flex items-center justify-between p-3 rounded-lg border\",\n                    todo.completed ? \"bg-muted/50\" : \"bg-card\"\n                  )}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Checkbox\n                      id={`todo-${todo.id}`}\n                      checked={todo.completed}\n                      onCheckedChange={() => toggleTodo(todo.id)}\n                    />\n                    <Label\n                      htmlFor={`todo-${todo.id}`}\n                      className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n                        todo.completed && \"line-through text-muted-foreground\"\n                      )}\n                    >\n                      {todo.task}\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {todo.dueDate && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        {format(todo.dueDate, 'MMM d')}\n                      </span>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => deleteTodo(todo.id)}\n                      className=\"h-8 w-8 text-destructive\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                      <span className=\"sr-only\">Delete</span>\n                    </Button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
    "createdAt": "2025-07-31T05:01:48.285Z",
    "tags": [
      "state",
      "button",
      "card",
      "input",
      "todolist"
    ]
  },
  {
    "id": "lib_1754153521306_xmy0w6s39",
    "name": "Component",
    "description": "A component component",
    "category": "ui",
    "filename": "Component.tsx",
    "code": "import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Cloud, Droplets, Sun, Wind } from \"lucide-react\"\n\n// TypeScript interfaces\ninterface ForecastDay {\n  day: string;\n  temperature: number;\n  weatherDescription: string;\n}\n\ninterface WeatherData {\n  location: string;\n  temperature: number;\n  humidity: number;\n  windSpeed: number;\n  weatherDescription: string;\n  forecast: ForecastDay[];\n}\n\n// Weather icon mapping function\nconst getWeatherIcon = (description: string) => {\n  const desc = description.toLowerCase();\n  if (desc.includes('sun') || desc.includes('clear')) return <Sun className=\"h-6 w-6 text-yellow-500\" />;\n  if (desc.includes('rain') || desc.includes('shower')) return <Droplets className=\"h-6 w-6 text-blue-500\" />;\n  return <Cloud className=\"h-6 w-6 text-gray-500\" />;\n};\n\nexport default function WeatherDashboard() {\n  // Mock data - in a real app, this would come from an API\n  const weatherData: WeatherData = {\n    location: \"New York\",\n    temperature: 72,\n    humidity: 65,\n    windSpeed: 8,\n    weatherDescription: \"Partly Cloudy\",\n    forecast: [\n      { day: \"Monday\", temperature: 75, weatherDescription: \"Sunny\" },\n      { day: \"Tuesday\", temperature: 70, weatherDescription: \"Partly Cloudy\" },\n      { day: \"Wednesday\", temperature: 68, weatherDescription: \"Rain Showers\" },\n      { day: \"Thursday\", temperature: 72, weatherDescription: \"Cloudy\" },\n      { day: \"Friday\", temperature: 76, weatherDescription: \"Sunny\" }\n    ]\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-6xl\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">{weatherData.location} Weather</h1>\n        <div className=\"flex items-center mt-2\">\n          <div className=\"text-5xl font-bold\">{weatherData.temperature}°F</div>\n          <Badge variant=\"outline\" className=\"ml-4 text-lg py-1\">\n            {weatherData.weatherDescription}\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Current Weather Card */}\n        <Card className=\"md:col-span-1\">\n          <CardHeader>\n            <CardTitle>Current Conditions</CardTitle>\n            <CardDescription>As of {new Date().toLocaleTimeString()}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Droplets className=\"h-5 w-5 text-blue-500 mr-2\" />\n                  <span>Humidity</span>\n                </div>\n                <span className=\"font-medium\">{weatherData.humidity}%</span>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Wind className=\"h-5 w-5 text-gray-500 mr-2\" />\n                  <span>Wind Speed</span>\n                </div>\n                <span className=\"font-medium\">{weatherData.windSpeed} mph</span>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  {getWeatherIcon(weatherData.weatherDescription)}\n                  <span className=\"ml-2\">Conditions</span>\n                </div>\n                <span className=\"font-medium\">{weatherData.weatherDescription}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 5-Day Forecast */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle>5-Day Forecast</CardTitle>\n            <CardDescription>Weather outlook for the week ahead</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n              {weatherData.forecast.map((day, index) => (\n                <Card key={index} className=\"bg-muted/50\">\n                  <CardHeader className=\"p-3 pb-0\">\n                    <CardTitle className=\"text-sm font-medium\">{day.day}</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-3 pt-1\">\n                    <div className=\"flex flex-col items-center\">\n                      {getWeatherIcon(day.weatherDescription)}\n                      <div className=\"mt-2 text-2xl font-bold\">{day.temperature}°F</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">{day.weatherDescription}</div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}",
    "createdAt": "2025-08-02T16:52:01.306Z",
    "tags": [
      "card",
      "component"
    ]
  },
  {
    "id": "lib_1754173530248_wmpsoenve",
    "name": "Component",
    "description": "A component component",
    "category": "ui",
    "filename": "Component.tsx",
    "code": "import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { InfoIcon } from \"lucide-react\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ntype AIModel = {\n  modelName: string;\n  accuracy: number;\n  parameters: number;\n  useCases: string;\n}\n\n// Example data - replace with your actual data\nconst aiModels: AIModel[] = [\n  { modelName: \"GPT-4\", accuracy: 94, parameters: 1750000000000, useCases: \"Text generation, reasoning, creative writing\" },\n  { modelName: \"Claude 2\", accuracy: 92, parameters: 137000000000, useCases: \"Conversation, document analysis\" },\n  { modelName: \"PaLM\", accuracy: 89, parameters: 540000000000, useCases: \"Multilingual tasks, code generation\" },\n  { modelName: \"Llama 2\", accuracy: 87, parameters: 70000000000, useCases: \"Open-source applications, research\" },\n  { modelName: \"BERT\", accuracy: 82, parameters: 340000000, useCases: \"NLP tasks, sentiment analysis\" },\n]\n\n// Format large numbers with abbreviations\nconst formatNumber = (num: number): string => {\n  if (num >= 1000000000000) {\n    return (num / 1000000000000).toFixed(1) + 'T';\n  } else if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1) + 'B';\n  } else if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  } else if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n}\n\nexport default function AIModelComparisonChart() {\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">AI Model Comparison</CardTitle>\n        <CardDescription>\n          Comparing key specifications of popular AI models\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-[180px]\">Model Name</TableHead>\n                <TableHead>\n                  <div className=\"flex items-center gap-2\">\n                    Accuracy\n                    <TooltipProvider>\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <InfoIcon className=\"h-4 w-4 text-muted-foreground\" />\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>Performance accuracy on benchmark tasks</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>\n                  </div>\n                </TableHead>\n                <TableHead>\n                  <div className=\"flex items-center gap-2\">\n                    Parameters\n                    <TooltipProvider>\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <InfoIcon className=\"h-4 w-4 text-muted-foreground\" />\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>Number of trainable parameters in the model</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>\n                  </div>\n                </TableHead>\n                <TableHead className=\"min-w-[250px]\">Use Cases</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {aiModels.map((model) => (\n                <TableRow key={model.modelName}>\n                  <TableCell className=\"font-medium\">{model.modelName}</TableCell>\n                  <TableCell>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium\">{model.accuracy}%</span>\n                      </div>\n                      <Progress value={model.accuracy} className=\"h-2\" />\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium\">{formatNumber(model.parameters)}</span>\n                      </div>\n                      <Progress \n                        value={Math.log10(model.parameters) / Math.log10(2000000000000) * 100} \n                        className=\"h-2\" \n                      />\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {model.useCases.split(\", \").map((useCase) => (\n                        <Badge key={useCase} variant=\"outline\" className=\"text-xs\">\n                          {useCase}\n                        </Badge>\n                      ))}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n        \n        <div className=\"mt-6 grid grid-cols-1 gap-4 md:grid-cols-2\">\n          <div className=\"rounded-lg border p-4\">\n            <h3 className=\"text-sm font-medium\">Accuracy</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Represents the model's performance on standard benchmark tasks. Higher percentages indicate better performance.\n            </p>\n          </div>\n          <div className=\"rounded-lg border p-4\">\n            <h3 className=\"text-sm font-medium\">Parameters</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              The number of trainable variables in the model. Generally, more parameters allow for more complex reasoning but require more computational resources.\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
    "createdAt": "2025-08-02T22:25:30.248Z",
    "tags": [
      "card",
      "form",
      "table",
      "chart",
      "component"
    ]
  }
]